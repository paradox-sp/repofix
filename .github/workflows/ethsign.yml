name: EthSign to SideStore Converter

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  convert-repo:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests pytz

      - name: Convert to SideStore format
        run: |
          python <<EOF
          import requests
          import json
          from datetime import datetime, timezone
          import pytz

          # Configuration
          SOURCE_URL = "https://repo.ethsign.fyi/"
          REPO_IDENTIFIER = "fyi.ethsign.repo"
          DEFAULT_ICON = "https://paradoxtime.tk/img/pdt_logo_nobg_shadow.png"

          # Fetch source
          print("üîÑ Fetching EthSign repo...")
          try:
              response = requests.get(SOURCE_URL, timeout=15)
              response.raise_for_status()
              src_data = response.json()
          except Exception as e:
              print(f"‚ùå Error fetching source: {e}")
              exit(1)

          # Transform to SideStore format
          output = {
              "name": "EthSign Apps",
              "identifier": REPO_IDENTIFIER,
              "sourceURL": "https://your-github-repo/sidestore-source.json",  # Update this!
              "iconURL": DEFAULT_ICON,
              "userinfo": {},
              "apps": []
          }

          # Process apps
          for app in src_data.get("apps", []):
              if not all(k in app for k in ["name", "bundleIdentifier", "version", "downloadURL"]):
                  continue

              # Get proper ISO 8601 timestamp
              now = datetime.now(timezone.utc).astimezone().isoformat()

              # Build version entry (minimal required fields)
              version_entry = {
                  "version": app["version"],
                  "date": app.get("versionDate", now),
                  "downloadURL": app["downloadURL"],
                  "size": app.get("size", 0),
                  "absoluteVersion": app["version"]
              }

              # Build app entry (minimal required fields)
              app_entry = {
                  "name": app["name"],
                  "bundleIdentifier": app["bundleIdentifier"],
                  "developerName": app.get("developerName", "Unknown"),
                  "version": app["version"],
                  "versionDate": app.get("versionDate", now),
                  "downloadURL": app["downloadURL"],
                  "localizedDescription": app.get("localizedDescription", "App from EthSign"),
                  "iconURL": app.get("iconURL", DEFAULT_ICON),
                  "size": app.get("size", 0),
                  "absoluteVersion": app["version"],
                  "appID": app["bundleIdentifier"],  # Must match bundleIdentifier
                  "versions": [version_entry]
              }

              # Optional fields (only add if they exist)
              for field in ["subtitle", "tintColor", "screenshotURLs"]:
                  if field in app:
                      app_entry[field] = app[field]

              output["apps"].append(app_entry)

          # Save output
          with open("sidestore-source.json", "w") as f:
              json.dump(output, f, indent=2, ensure_ascii=False)
          print(f"‚úÖ Generated {len(output['apps'])} apps")
          EOF

      - name: Validate JSON
        run: |
          sudo apt-get install -y jq
          
          # Check basic JSON validity
          if ! jq empty sidestore-source.json; then
            echo "‚ùå Invalid JSON structure"
            exit 1
          fi

          # Check critical SideStore requirements
          REQUIRED_FIELDS=(
            '.identifier'
            '.sourceURL'
            '.apps[].name'
            '.apps[].bundleIdentifier'
            '.apps[].version'
            '.apps[].downloadURL'
            '.apps[].absoluteVersion'
            '.apps[].appID'
            '.apps[].versions[].version'
            '.apps[].versions[].downloadURL'
          )

          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! jq -e "$field" sidestore-source.json >/dev/null; then
              echo "‚ùå Missing required field: $field"
              exit 1
            fi
          done

          # Verify appID matches bundleIdentifier
          if jq -e '.apps[] | select(.appID != .bundleIdentifier)' sidestore-source.json >/dev/null; then
            echo "‚ùå Found apps where appID doesn't match bundleIdentifier"
            exit 1
          fi

          echo "‚úÖ All validations passed"

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add sidestore-source.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto-update: $(date +'%Y-%m-%d %H:%M')"
          git push
