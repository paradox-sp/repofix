name: EthSign to SideStore Converter

on:
  schedule:
    - cron: '50 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  convert-repo:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests pytz packaging

      - name: Convert to SideStore format
        run: |
          python <<EOF
          import requests
          import json
          from datetime import datetime, timezone
          from packaging.version import Version, InvalidVersion

          # Configuration
          SOURCE_URL = "https://repo.ethsign.fyi/"
          REPO_IDENTIFIER = "fyi.ethsign.repo"
          DEFAULT_ICON = "https://paradoxtime.tk/img/pdt_logo_nobg_shadow.png"
          YOUR_REPO_URL = "https://raw.githubusercontent.com/paradox-sp/repofix/main/sidestore-source.json"

          # Fetch source
          print("üîÑ Fetching EthSign repo...")
          try:
              response = requests.get(SOURCE_URL, timeout=15)
              response.raise_for_status()
              src_data = response.json()
          except Exception as e:
              print(f"‚ùå Error fetching source: {e}")
              exit(1)

          # Transform to SideStore format
          output = {
              "name": "ParadoxTime Repo | Ethmod",
              "identifier": REPO_IDENTIFIER,
              "sourceURL": YOUR_REPO_URL,
              "iconURL": DEFAULT_ICON,
              "userinfo": {},
              "subtitle": "From EthSign repo, fixed for AltStore/SideStore",
              "description": "ParadoxTime Repo ‚Äî fetches IPAs from EthSign repo",
              "apps": []
          }

          def parse_version(ver_str):
              try:
                  return Version(ver_str)
              except InvalidVersion:
                  return Version("0.0.0")

          # Track newest version of each bundle
          newest_versions = {}

          for app in src_data.get("apps", []):
              if not all(k in app for k in ["name", "bundleIdentifier", "version", "downloadURL"]):
                  continue

              bundle_id = app["bundleIdentifier"]
              current_version = parse_version(app["version"])

              # Keep only the newest version
              if bundle_id not in newest_versions or current_version > parse_version(newest_versions[bundle_id]["version"]):
                  newest_versions[bundle_id] = app

          # Process the newest versions
          for bundle_id, app in newest_versions.items():
              now = datetime.now(timezone.utc).astimezone().isoformat()

              # Build version entry
              version_entry = {
                  "version": app["version"],
                  "date": app.get("versionDate", now),
                  "downloadURL": app["downloadURL"],
                  "size": app.get("size", 0),
                  "absoluteVersion": app["version"],
                  "localizedDescription": app.get("localizedDescription", "Latest version")
              }

              # Build app entry
              app_entry = {
                  "name": app["name"],
                  "bundleIdentifier": bundle_id,
                  "developerName": app.get("developerName", "Unknown Developer"),
                  "version": app["version"],
                  "versionDate": version_entry["date"],
                  "downloadURL": app["downloadURL"],
                  "localizedDescription": app.get("localizedDescription", "App from EthSign repository"),
                  "iconURL": app.get("iconURL", DEFAULT_ICON),
                  "size": app.get("size", 0),
                  "absoluteVersion": app["version"],
                  "appID": bundle_id,
                  "versions": [version_entry]
              }

              # Add optional fields
              for field in ["subtitle", "tintColor", "screenshotURLs", "category"]:
                  if field in app:
                      app_entry[field] = app[field]

              output["apps"].append(app_entry)

          # Save output
          with open("sidestore-source.json", "w", encoding='utf-8') as f:
              json.dump(output, f, indent=2, ensure_ascii=False)
          print(f"‚úÖ Generated {len(output['apps'])} unique apps (newest versions only)")
          EOF

      - name: Validate JSON
        run: |
          # Check for duplicate bundle identifiers
          DUPLICATES=$(jq -r '.apps[].bundleIdentifier' sidestore-source.json | sort | uniq -d)
          if [ -n "$DUPLICATES" ]; then
            echo "‚ùå Found duplicate bundle identifiers:"
            echo "$DUPLICATES"
            exit 1
          fi

          # Basic JSON validation
          if ! jq empty sidestore-source.json; then
            echo "‚ùå Invalid JSON structure"
            exit 1
          fi

          echo "‚úÖ All validations passed"

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add sidestore-source.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto-update: Newest versions only - $(date +'%Y-%m-%d %H:%M')"
          git push
