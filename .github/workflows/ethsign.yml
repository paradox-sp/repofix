name: Fetch and Convert EthSign Repo to AltStore
'on':
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch: null
permissions:
  contents: write
jobs:
  convert-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Create conversion script
        run: |
          cat <<'EOF' > convert.py
          import json, requests, re
          from datetime import datetime
          from collections import defaultdict

          def parse_date(date_str):
              try:
                  return datetime.strptime(date_str, '%Y-%m-%d')
              except ValueError:
                  return datetime.min

          def sanitize_version(v):
              parts = re.findall(r'\d+', v)
              while len(parts) < 3:
                  parts.append('0')
              return '.'.join(parts[:3])

          FEATURE_BUNDLES = {
              'com.google.ios.youtube',
              'com.burbn.instagram',
              'com.spotify.client'
          }

          def fetch_source():
              try:
                  r = requests.get('https://repo.ethsign.fyi/', timeout=10)
                  r.raise_for_status()
                  return r.json()
              except Exception as e:
                  print(f"Fetch error: {e}")
                  return None

          def process_apps(source):
              if not source or 'apps' not in source:
                  return [], []

              apps = source.get('apps', [])
              grouped = defaultdict(list)
              for app in apps:
                  grouped[app['bundleIdentifier']].append(app)

              filtered = []
              for versions in grouped.values():
                  versions.sort(key=lambda x: parse_date(x.get('versionDate', '')), reverse=True)
                  filtered.extend(versions[:3])

              featured, others = [], []

              def transform(app, is_featured=False):
                  return {
                      'name': app['name'],
                      'bundleIdentifier': app['bundleIdentifier'],
                      'developerName': app.get('developerName') or 'Unknown Developer',
                      'version': sanitize_version(app['version']),
                      'versionDate': app.get('versionDate', ''),
                      'downloadURL': app['downloadURL'],
                      'localizedDescription': app.get('localizedDescription', ''),
                      'iconURL': app['iconURL'],
                      'size': int(app.get('size', 0)),
                      'tintColor': '#007AFF',
                      **({'featured': True} if is_featured else {})
                  }

              for app in filtered:
                  is_featured = app['bundleIdentifier'] in FEATURE_BUNDLES
                  (featured if is_featured else others).append(transform(app, is_featured))

              featured.sort(key=lambda x: parse_date(x['versionDate']), reverse=True)
              others.sort(key=lambda x: parse_date(x['versionDate']), reverse=True)

              return featured, others

          def main():
              source = fetch_source()
              if not source:
                  return False

              featured, others = process_apps(source)

              out = {
                  'name': 'ParadoxTime Repo | Ethmod',
                  'identifier': 'fyi.ethsign.repo',
                  'sourceURL': 'https://raw.githubusercontent.com/paradox-sp/repofix/main/sidestore-source.json',
                  'iconURL': 'https://paradoxtime.tk/img/pdt_logo_nobg_shadow.png',
                  'userinfo': {},
                  'subtitle': 'From EthSign repo, fixed for AltStore/SideStore',
                  'description': 'ParadoxTime Repo â€” fetches IPAs from EthSign repo',
                  'apps': featured + others
              }

              with open('sidestore-source.json', 'w') as f:
                  json.dump(out, f, indent=2)
              return True

          if __name__ == '__main__':
              if not main():
                  exit(1)
          EOF
      - name: Run conversion script
        run: python3 convert.py
      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet --exit-code sidestore-source.json; then
            echo "No changes to commit"
          else
            git add sidestore-source.json
            git commit -m "Update sidestore-source.json from EthSign (latest 3 versions, fixed versions)"
            git push
          fi
