on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  clean-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests packaging

      - name: Download, clean and sort JSON
        run: |
          python <<EOF
          import json
          import requests
          from packaging import version

          url = "https://aio.zxcvbn.fyi/r/repo.altstore.json"
          response = requests.get(url)
          data = response.json()

          data["name"] = "ParadoxTime Repo | Spry"
          data["identifier"] = "aiorepo.paradoxtime.tk"
          data["iconURL"] = "https://paradoxtime.tk/img/pdt_logo_nobg_shadow.png"
          data["subtitle"] = "Fixes"
          data["description"] = "Paradoxtime Repo â€” fetches IPAs from zx's AIO repo and fixes duplicate issues."

          for app in data.get("apps", []):
              if "source" in app and "zx's" in app["source"].lower():
                  app["source"] = "paradoxtime (via zx's aio repo)"

          seen_versions_global = set()

          cleaned_apps = []
          for app in data.get("apps", []):
              bundle_id = app.get("bundleIdentifier")
              cleaned_versions = []
              for v in app.get("versions", []):
                  ver = v.get("version")
                  key = (bundle_id, ver)
                  if key in seen_versions_global:
                      new_ver = ver + "-alt"
                      v["version"] = new_ver
                      key = (bundle_id, new_ver)
                      if key in seen_versions_global:
                          suffix = 1
                          while (bundle_id, f"{new_ver}-{suffix}") in seen_versions_global:
                              suffix += 1
                          v["version"] = f"{new_ver}-{suffix}"
                          key = (bundle_id, v["version"])
                  seen_versions_global.add(key)
                  cleaned_versions.append(v)

              def version_key(ver_obj):
                  try:
                      return version.parse(ver_obj.get("version"))
                  except:
                      return version.parse("0")

              cleaned_versions.sort(key=version_key, reverse=True)
              app["versions"] = cleaned_versions
              cleaned_apps.append(app)

          data["apps"] = cleaned_apps

          with open("repo-source.json", "w") as f:
              json.dump(data, f, indent=2)
          EOF

      - name: Commit cleaned JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add repo-source.json
          git commit -m "Auto-cleaned, sorted and updated metadata" || echo "No changes to commit"
          git push
